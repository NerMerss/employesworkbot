import os
import logging
import base64
import json
from typing import Dict, List, Optional
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)
import datetime
import tempfile
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
MODEL, VIN, WORK, DESCRIPTION, UPLOAD_CSV = range(5)
RECENT_ITEMS_LIMIT = 5
MAX_WORK_LENGTH = 64  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–ø–∏—Å—É —Ä–æ–±–æ—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö

# –°–ø–∏—Å–∫–∏ –º–æ–¥–µ–ª–µ–π
TESLA_MODELS = ["Model 3", "Model Y", "Model S", "Model X", "Cybertruck", "Roadster", "–Ü–Ω—à–µ (–Ω–µ Tesla)"]
OTHER_MODELS = ["Rivian R1T", "Rivian R1S", "Lucid Air", "Zeekr 001", "Zeekr 007", "–Ü–Ω—à–µ"]

# –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
SPECIAL_COMMANDS = [
    "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å", "üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ", "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é",
    "üîô –ù–∞–∑–∞–¥", "‚úÖ –¢–∞–∫", "‚ùå –ù—ñ", "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
]

# –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_SHEETS_CREDENTIALS_BASE64 = os.getenv("GOOGLE_SHEETS_CREDENTIALS_BASE64")
GOOGLE_SHEETS_SPREADSHEET_ID = os.getenv("GOOGLE_SHEETS_SPREADSHEET_ID")

def parse_user_list(env_var: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ { '@username': '–Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ' }"""
    users = {}
    for item in os.getenv(env_var, "").split(","):
        if not item.strip():
            continue
        parts = item.strip().split(" ", 1)
        if len(parts) >= 2:
            username = parts[0] if parts[0].startswith("@") else f"@{parts[0]}"
            name = parts[1]
            users[username] = name
    return users

# –†—ñ–≤–Ω—ñ –¥–æ—Å—Ç—É–ø—É
OWNERS = parse_user_list("OWNERS")
MANAGERS = parse_user_list("MANAGERS")
WORKERS = parse_user_list("WORKERS")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
OWNER_MENU = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"], ["üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ", "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é"]],
    resize_keyboard=True
)

MANAGER_MENU = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"]],
    resize_keyboard=True
)

WORKER_MENU = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"]],
    resize_keyboard=True
)

DESCRIPTION_MARKUP = ReplyKeyboardMarkup(
    [["‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

UPLOAD_MARKUP = ReplyKeyboardMarkup(
    [["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

class GoogleSheetsManager:
    HEADERS = ["id", "timestamp", "user", "user_name", "executor", "executor_name", "model", "vin", "work", "description", "user_level"]
    
    def __init__(self):
        # –î–µ–∫–æ–¥—É—î–º–æ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ base64
        creds_json = base64.b64decode(GOOGLE_SHEETS_CREDENTIALS_BASE64).decode('utf-8')
        creds_dict = json.loads(creds_json)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç Credentials
        self.credentials = Credentials.from_service_account_info(
            creds_dict,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ API
        self.service = build('sheets', 'v4', credentials=self.credentials)
        self.sheet = self.service.spreadsheets()
    
    def _get_sheet_data(self, range_name: str) -> List[List]:
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑ –∞—Ä–∫—É—à–∞"""
        try:
            result = self.sheet.values().get(
                spreadsheetId=GOOGLE_SHEETS_SPREADSHEET_ID,
                range=range_name
            ).execute()
            return result.get('values', [])
        except HttpError as error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ Google Sheets: {error}")
            return []
    
    def _append_to_sheet(self, range_name: str, values: List[List]) -> bool:
        """–î–æ–¥–∞—î –¥–∞–Ω—ñ –¥–æ –∞—Ä–∫—É—à–∞"""
        try:
            body = {'values': values}
            result = self.sheet.values().append(
                spreadsheetId=GOOGLE_SHEETS_SPREADSHEET_ID,
                range=range_name,
                valueInputOption="USER_ENTERED",
                body=body
            ).execute()
            return True
        except HttpError as error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –¥–æ Google Sheets: {error}")
            return False
    
    def get_recent_values(self, field: str, limit: int = RECENT_ITEMS_LIMIT) -> List[str]:
        """–û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ –ø–æ–ª—è"""
        try:
            data = self._get_sheet_data("Sheet1")
            if not data:
                return []
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å —Å—Ç–æ–≤–ø—Ü—è
            header = data[0]
            try:
                col_index = header.index(field)
            except ValueError:
                return []
            
            # –ó–±–∏—Ä–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            values = []
            seen = set()
            for row in reversed(data[1:]):
                if len(values) >= limit:
                    break
                if len(row) > col_index:
                    val = row[col_index].strip()
                    if val and val not in seen:
                        seen.add(val)
                        values.append(val)
            return values
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å: {e}")
            return []
    
    def save_record(self, user_data: Dict[str, str], username: str, user_name: str, user_level: str) -> int:
        """–ó–±–µ—Ä—ñ–≥–∞—î –∑–∞–ø–∏—Å —É Google Sheets"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ ID
            data = self._get_sheet_data("Sheet1")
            if not data:
                # –Ø–∫—â–æ –∞—Ä–∫—É—à –ø–æ—Ä–æ–∂–Ω—ñ–π, –¥–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                self._append_to_sheet("Sheet1", [self.HEADERS])
                next_id = 1
            else:
                next_id = int(data[-1][0]) + 1 if len(data) > 1 else 1
            
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            new_row = [
                str(next_id),
                timestamp,
                username,
                user_name,
                user_data["executor"],
                user_data["executor_name"],
                user_data["model"],
                user_data["vin"],
                user_data["work"],
                user_data.get("description", ""),
                user_level
            ]
            
            if self._append_to_sheet("Sheet1", [new_row]):
                return next_id
            return 0
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É: {e}")
            return 0
    
    def export_to_csv(self, file_path: str) -> bool:
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ –∑ Google Sheets —É CSV —Ñ–∞–π–ª"""
        try:
            data = self._get_sheet_data("Sheet1")
            if not data:
                return False
            
            with open(file_path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerows(data)
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö —É CSV: {e}")
            return False

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä Google Sheets
sheets_manager = GoogleSheetsManager()

def get_user_level(username: str) -> Optional[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    username = username.lower().strip()
    if not username.startswith("@"):
        username = f"@{username}"
        
    if username in {k.lower(): v for k, v in OWNERS.items()}:
        return "owner"
    elif username in {k.lower(): v for k, v in MANAGERS.items()}:
        return "manager"
    elif username in {k.lower(): v for k, v in WORKERS.items()}:
        return "worker"
    return None

def create_keyboard(items: List[str], prefix: str) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(item, callback_data=f"{prefix}:{item}")] for item in items]
    buttons.append([InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data=f"{prefix}:manual")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(buttons)

def create_model_keyboard(models: List[str]) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(model, callback_data=f"model:{model}")] for model in models]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(buttons)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    if query:
        await query.answer()
        try:
            await query.delete_message()
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    username = f"@{update.effective_user.username}"
    user_level = get_user_level(username)
    
    if user_level == "owner":
        await update.effective_message.reply_text("–ú–µ–Ω—é –≤–ª–∞—Å–Ω–∏–∫–∞:", reply_markup=OWNER_MENU)
    elif user_level == "manager":
        await update.effective_message.reply_text("–ú–µ–Ω—é –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞:", reply_markup=MANAGER_MENU)
    else:
        await update.effective_message.reply_text("–ú–µ–Ω—é –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=WORKER_MENU)
    
    context.user_data.clear()
    return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ—á–∞—Ç–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º"""
    username = f"@{update.effective_user.username}"
    user_level = get_user_level(username)
    
    if not user_level:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞")
        return
    
    if user_level == "owner":
        await update.message.reply_text("–ú–µ–Ω—é –≤–ª–∞—Å–Ω–∏–∫–∞:", reply_markup=OWNER_MENU)
    elif user_level == "manager":
        await update.message.reply_text("–ú–µ–Ω—é –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞:", reply_markup=MANAGER_MENU)
    else:
        await update.message.reply_text("–ú–µ–Ω—é –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=WORKER_MENU)

async def add_record(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É"""
    username = f"@{update.effective_user.username}"
    user_level = get_user_level(username)
    user_name = OWNERS.get(username) or MANAGERS.get(username) or WORKERS.get(username) or update.effective_user.full_name
    
    if not user_level:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END
    
    context.user_data["user_level"] = user_level
    context.user_data["user_name"] = user_name
    
    if user_level == "worker":
        context.user_data["executor"] = username
        context.user_data["executor_name"] = user_name
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:",
            reply_markup=create_model_keyboard(TESLA_MODELS)
        )
        return MODEL
    
    # –î–ª—è –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ —ñ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    if user_level == "owner":
        executors = {**MANAGERS, **WORKERS}  # –í–ª–∞—Å–Ω–∏–∫–∏ –±–∞—á–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ —ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤
    else:  # manager
        executors = WORKERS  # –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –±–∞—á–∞—Ç—å —Ç—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤
    
    buttons = []
    # –î–æ–¥–∞—î–º–æ —Å–µ–±–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if user_level == "manager":
        buttons.append([InlineKeyboardButton(
            f"–Ø ({user_name})",
            callback_data=f"executor:{username}:{user_name}"
        )])
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω—à–∏—Ö –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤
    for user_id, name in executors.items():
        buttons.append([InlineKeyboardButton(
            name,
            callback_data=f"executor:{user_id}:{name}"
        )])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return MODEL

async def executor_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≤–∏–∫–æ–Ω–∞–≤—Ü—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        return await back_to_menu(update, context)
    
    _, user_id, name = query.data.split(":", 2)
    context.user_data["executor"] = user_id
    context.user_data["executor_name"] = name
    
    await query.edit_message_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:",
        reply_markup=create_model_keyboard(TESLA_MODELS)
    )
    return MODEL

async def model_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        return await back_to_menu(update, context)
    
    selected = query.data.split(":")[1]
    context.user_data["model"] = selected
    
    if selected == "–Ü–Ω—à–µ (–Ω–µ Tesla)":
        await query.edit_message_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:",
            reply_markup=create_model_keyboard(OTHER_MODELS)
        )
        return MODEL
    
    vins = sheets_manager.get_recent_values("vin")
    await query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å VIN –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:",
        reply_markup=create_keyboard(vins, "vin")
    )
    return VIN

async def model_manual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î —Ä—É—á–Ω–∏–π –≤–≤—ñ–¥ –º–æ–¥–µ–ª—ñ"""
    text = update.message.text.strip()
    
    if text in SPECIAL_COMMANDS:
        return await handle_text_messages(update, context)
    
    if text in TESLA_MODELS + OTHER_MODELS:
        context.user_data["model"] = text
    else:
        context.user_data["model"] = f"–Ü–Ω—à–µ: {text}"
    
    vins = sheets_manager.get_recent_values("vin")
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å VIN –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:",
        reply_markup=create_keyboard(vins, "vin")
    )
    return VIN

async def vin_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä VIN"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        return await back_to_menu(update, context)
    
    selected = query.data.split(":")[1]
    if selected == "manual":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ 6 —Å–∏–º–≤–æ–ª—ñ–≤ VIN:")
        return VIN
    
    context.user_data["vin"] = selected
    await query.edit_message_text(f"VIN: {selected}")
    return await show_work_options(update, context)

async def vin_manual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î —Ä—É—á–Ω–∏–π –≤–≤—ñ–¥ VIN"""
    text = update.message.text.strip()
    
    if text in SPECIAL_COMMANDS:
        return await handle_text_messages(update, context)
    
    if len(text) != 6 or not text.isalnum():
        await update.message.reply_text("‚ùó –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–Ω–æ 6 —Å–∏–º–≤–æ–ª—ñ–≤ VIN.")
        return VIN
    
    context.user_data["vin"] = text.upper()
    return await show_work_options(update, context)

async def show_work_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä–æ–±—ñ—Ç"""
    works = sheets_manager.get_recent_values("work", 6)
    keyboard = create_keyboard(works, "work")
    
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                "–©–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ? (–º–∞–∫—Å. 64 —Å–∏–º–≤–æ–ª–∏)",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await update.callback_query.message.reply_text(
                "–©–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ? (–º–∞–∫—Å. 64 —Å–∏–º–≤–æ–ª–∏)",
                reply_markup=keyboard
            )
    else:
        await update.message.reply_text(
            "–©–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ? (–º–∞–∫—Å. 64 —Å–∏–º–≤–æ–ª–∏)",
            reply_markup=keyboard
        )
    return WORK

async def work_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ä–æ–±—ñ—Ç"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        return await back_to_menu(update, context)
    
    work_text = query.data.split(":")[1]
    if work_text == "manual":
        try:
            await query.edit_message_text(
                "–í–≤–µ–¥—ñ—Ç—å, —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ (–º–∞–∫—Å. 64 —Å–∏–º–≤–æ–ª–∏):",
                reply_markup=ReplyKeyboardRemove()
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await query.message.reply_text(
                "–í–≤–µ–¥—ñ—Ç—å, —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ (–º–∞–∫—Å. 64 —Å–∏–º–≤–æ–ª–∏):",
                reply_markup=ReplyKeyboardRemove()
            )
        return WORK
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É —Ä–æ–±–æ—Ç–∏
    if len(work_text.encode('utf-8')) > MAX_WORK_LENGTH:
        await query.edit_message_text(
            f"‚ùó –û–ø–∏—Å —Ä–æ–±–æ—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å. {MAX_WORK_LENGTH} –±–∞–π—Ç). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=create_keyboard(sheets_manager.get_recent_values("work", 6), "work")
        )
        return WORK
    
    context.user_data["work"] = work_text
    await ask_for_description(update, context)
    return DESCRIPTION

async def work_manual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î —Ä—É—á–Ω–∏–π –≤–≤—ñ–¥ —Ä–æ–±—ñ—Ç"""
    text = update.message.text.strip()
    
    if text in SPECIAL_COMMANDS:
        return await handle_text_messages(update, context)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É —Ä–æ–±–æ—Ç–∏
    if len(text.encode('utf-8')) > MAX_WORK_LENGTH:
        await update.message.reply_text(
            f"‚ùó –û–ø–∏—Å —Ä–æ–±–æ—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å. {MAX_WORK_LENGTH} –±–∞–π—Ç). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=create_keyboard(sheets_manager.get_recent_values("work", 6), "work")
        )
        return WORK
    
    context.user_data["work"] = text
    await ask_for_description(update, context)
    return DESCRIPTION

async def ask_for_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø–∏—Ç—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–ø–∏—Å"""
    message_text = "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–ø–∏—Å?"
    
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=DESCRIPTION_MARKUP
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await update.callback_query.message.reply_text(
                message_text,
                reply_markup=DESCRIPTION_MARKUP
            )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=DESCRIPTION_MARKUP
        )

async def handle_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–ø–∏—Å"""
    text = update.message.text.strip()
    
    if text in SPECIAL_COMMANDS:
        if text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
            context.user_data["description"] = ""
            return await save_and_confirm(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥":
            return await show_work_options(update, context)
        return DESCRIPTION
    
    context.user_data["description"] = text
    return await save_and_confirm(update, context)

async def save_and_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–±–µ—Ä—ñ–≥–∞—î –∑–∞–ø–∏—Å —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î"""
    username = f"@{update.effective_user.username}"
    user_name = context.user_data["user_name"]
    user_level = context.user_data["user_level"]
    
    record_id = sheets_manager.save_record(context.user_data, username, user_name, user_level)
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    
    message_text = (
        f"‚úÖ –ó–∞–ø–∏—Å #{record_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ\n"
        f"–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {context.user_data['executor_name']}\n"
        f"–ú–æ–¥–µ–ª—å: {context.user_data['model']}\n"
        f"VIN: {context.user_data['vin']}\n"
        f"–†–æ–±–æ—Ç–∞: {context.user_data['work']}"
    )
    
    if context.user_data.get("description"):
        message_text += f"\n–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–ø–∏—Å: {context.user_data['description']}"
    
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await update.callback_query.message.reply_text(
                message_text,
                reply_markup=keyboard
            )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=keyboard
        )
    
    return ConversationHandler.END

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï–∫—Å–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ —É CSV"""
    username = f"@{update.effective_user.username}"
    if get_user_level(username) != "owner":
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó")
        return
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w+', suffix='.csv', delete=False, encoding='utf-8') as temp_file:
            temp_path = temp_file.name
        
        # –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ —É CSV
        if sheets_manager.export_to_csv(temp_path):
            await update.message.reply_document(
                document=open(temp_path, 'rb'),
                filename='service_records.csv'
            )
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_path)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É: {e}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö")

async def upload_csv_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV —Ñ–∞–π–ª—É"""
    username = f"@{update.effective_user.username}"
    if get_user_level(username) != "owner":
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å CSV —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. "
        "–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ç–∞–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ:\n" +
        ", ".join(GoogleSheetsManager.HEADERS),
        reply_markup=UPLOAD_MARKUP
    )
    return UPLOAD_CSV

async def handle_csv_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π CSV —Ñ–∞–π–ª"""
    if update.message.text and update.message.text.strip() == "üîô –ù–∞–∑–∞–¥":
        return await back_to_menu(update, context)
    
    if not update.message.document or not update.message.document.file_name.lower().endswith('.csv'):
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å CSV —Ñ–∞–π–ª (—Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .csv) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üîô –ù–∞–∑–∞–¥'",
            reply_markup=UPLOAD_MARKUP
        )
        return UPLOAD_CSV
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª —É —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        file = await context.bot.get_file(update.message.document.file_id)
        temp_file_path = os.path.join(tempfile.gettempdir(), update.message.document.file_name)
        await file.download_to_drive(temp_file_path)
        
        # –ß–∏—Ç–∞—î–º–æ CSV —Ñ–∞–π–ª
        with open(temp_file_path, 'r', encoding='utf-8') as f:
            csv_data = list(csv.reader(f))
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if not csv_data or csv_data[0] != GoogleSheetsManager.HEADERS:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.",
                reply_markup=OWNER_MENU
            )
            return ConversationHandler.END
        
        # –û—á–∏—â–∞—î–º–æ –∞—Ä–∫—É—à —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ
        try:
            # –û—á–∏—â–∞—î–º–æ –∞—Ä–∫—É—à
            sheets_manager.sheet.values().clear(
                spreadsheetId=GOOGLE_SHEETS_SPREADSHEET_ID,
                range="Sheet1"
            ).execute()
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ
            sheets_manager._append_to_sheet("Sheet1", csv_data)
            
            await update.message.reply_text("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=OWNER_MENU)
        except HttpError as error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —É Google Sheets: {error}")
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —É Google Sheets",
                reply_markup=OWNER_MENU
            )
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_file_path)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É: {e}")
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ CSV —Ñ–∞–π–ª—É: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=OWNER_MENU
        )
    
    return ConversationHandler.END

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    username = f"@{update.effective_user.username}"
    user_level = get_user_level(username)
    
    if not user_level:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞")
        return
    
    text = update.message.text.strip()
    
    if text in SPECIAL_COMMANDS:
        if text == "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å":
            await add_record(update, context)
        elif text == "üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ" and user_level == "owner":
            await export_data(update, context)
        elif text == "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é" and user_level == "owner":
            await upload_csv_start(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥":
            await back_to_menu(update, context)
        return
    
    current_state = await context.application.persistence.get_conversation(update.effective_chat.id)
    if current_state:
        if current_state.get('state') == MODEL:
            await model_manual(update, context)
        elif current_state.get('state') == VIN:
            await vin_manual(update, context)
        elif current_state.get('state') == WORK:
            await work_manual(update, context)
        elif current_state.get('state') == DESCRIPTION:
            await handle_description(update, context)
        elif current_state.get('state') == UPLOAD_CSV:
            await handle_csv_upload(update, context)
    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –ø–æ—Ç–æ—á–Ω—É –±–µ—Å—ñ–¥—É"""
    return await back_to_menu(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É BOT_TOKEN!")
        return
    
    if not GOOGLE_SHEETS_CREDENTIALS_BASE64 or not GOOGLE_SHEETS_SPREADSHEET_ID:
        logger.error("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è Google Sheets!")
        return
    
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    app.add_error_handler(error_handler)
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –±–µ—Å—ñ–¥–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å$"), add_record),
            CallbackQueryHandler(back_to_menu, pattern="^back$")
        ],
        states={
            MODEL: [
                CallbackQueryHandler(model_selected, pattern="^model:"),
                CallbackQueryHandler(executor_selected, pattern="^executor:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, model_manual),
            ],
            VIN: [
                CallbackQueryHandler(vin_selected, pattern="^vin:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, vin_manual),
            ],
            WORK: [
                CallbackQueryHandler(work_selected, pattern="^work:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, work_manual),
            ],
            DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_description),
            ],
            UPLOAD_CSV: [
                MessageHandler(filters.TEXT | filters.Document.ALL, handle_csv_upload),
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == '__main__':
    import csv  # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç csv –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    main()