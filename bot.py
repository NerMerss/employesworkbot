import os
import csv
import logging
from typing import Dict, List, Optional
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Document
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)
import datetime
import tempfile

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
MODEL, VIN, WORK, DESCRIPTION, UPLOAD_CSV = range(5)
CSV_FILE = "/data/records.csv"
RECENT_ITEMS_LIMIT = 5
MAX_WORK_LENGTH = 64  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–ø–∏—Å—É —Ä–æ–±–æ—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö

# –°–ø–∏—Å–∫–∏ –º–æ–¥–µ–ª–µ–π
TESLA_MODELS = ["Model 3", "Model Y", "Model S", "Model X", "Cybertruck", "Roadster", "–Ü–Ω—à–µ (–Ω–µ Tesla)"]
OTHER_MODELS = ["Rivian R1T", "Rivian R1S", "Lucid Air", "Zeekr 001", "Zeekr 007", "–Ü–Ω—à–µ"]

# –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
SPECIAL_COMMANDS = [
    "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å", "üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ", "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é",
    "üîô –ù–∞–∑–∞–¥", "‚úÖ –¢–∞–∫", "‚ùå –ù—ñ", "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
]

def parse_user_list(env_var: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ { '@username': '–Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ' }"""
    users = {}
    for item in os.getenv(env_var, "").split(","):
        if not item.strip():
            continue
        parts = item.strip().split(" ", 1)
        if len(parts) >= 2:
            username = parts[0] if parts[0].startswith("@") else f"@{parts[0]}"
            name = parts[1]
            users[username] = name
    return users

# –†—ñ–≤–Ω—ñ –¥–æ—Å—Ç—É–ø—É
OWNERS = parse_user_list("OWNERS")
MANAGERS = parse_user_list("MANAGERS")
WORKERS = parse_user_list("WORKERS")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
OWNER_MENU = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"], ["üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ", "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é"]],
    resize_keyboard=True
)

MANAGER_MENU = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"]],
    resize_keyboard=True
)

WORKER_MENU = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"]],
    resize_keyboard=True
)

DESCRIPTION_MARKUP = ReplyKeyboardMarkup(
    [["‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

UPLOAD_MARKUP = ReplyKeyboardMarkup(
    [["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

class CSVManager:
    HEADERS = ["id", "timestamp", "user", "user_name", "executor", "executor_name", "model", "vin", "work", "description", "user_level"]
    
    @staticmethod
    def ensure_file_exists():
        if not os.path.exists(CSV_FILE):
            with open(CSV_FILE, mode='w', newline='', encoding='utf-8') as f:
                csv.writer(f).writerow(CSVManager.HEADERS)
    
    @staticmethod
    def get_recent_values(field: str, limit: int = RECENT_ITEMS_LIMIT) -> List[str]:
        values = []
        seen = set()
        try:
            with open(CSV_FILE, newline='', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reversed(list(reader)):
                    if len(values) >= limit:
                        break
                    val = row.get(field, "").strip()
                    if val and val not in seen:
                        seen.add(val)
                        values.append(val)
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª CSV –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return values
    
    @staticmethod
    def save_record(user_data: Dict[str, str], username: str, user_name: str, user_level: str) -> int:
        CSVManager.ensure_file_exists()
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        with open(CSV_FILE, 'r+', newline='', encoding='utf-8') as f:
            rows = list(csv.reader(f))
            next_id = int(rows[-1][0]) + 1 if len(rows) > 1 else 1
            writer = csv.writer(f)
            writer.writerow([
                next_id,
                timestamp,
                username,
                user_name,
                user_data["executor"],
                user_data["executor_name"],
                user_data["model"],
                user_data["vin"],
                user_data["work"],
                user_data.get("description", ""),
                user_level
            ])
        return next_id
    
    @staticmethod
    def replace_data(new_data_path: str) -> bool:
        try:
            # Validate the new file
            with open(new_data_path, newline='', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                if not reader.fieldnames or set(reader.fieldnames) != set(CSVManager.HEADERS):
                    return False
                
                # Make a backup
                backup_path = f"{CSV_FILE}.bak"
                if os.path.exists(CSV_FILE):
                    os.replace(CSV_FILE, backup_path)
                
                # Replace the file
                os.replace(new_data_path, CSV_FILE)
                return True
        except Exception as e:
            logger.error(f"Error replacing CSV file: {e}")
            return False

async def work_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ä–æ–±—ñ—Ç - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        return await back_to_menu(update, context)
    
    work_text = query.data.split(":")[1]
    if work_text == "manual":
        await query.edit_message_text(
            "–í–≤–µ–¥—ñ—Ç—å, —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ (–º–∞–∫—Å. 64 —Å–∏–º–≤–æ–ª–∏):",
            reply_markup=None
        )
        return WORK
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É —Ä–æ–±–æ—Ç–∏
    if len(work_text.encode('utf-8')) > MAX_WORK_LENGTH:
        works = CSVManager.get_recent_values("work", 6)
        keyboard = create_keyboard(works, "work")
        await query.edit_message_text(
            f"‚ùó –û–ø–∏—Å —Ä–æ–±–æ—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å. {MAX_WORK_LENGTH} –±–∞–π—Ç). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=keyboard
        )
        return WORK
    
    context.user_data["work"] = work_text
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–ø–∏—Å?",
        reply_markup=DESCRIPTION_MARKUP
    )
    return DESCRIPTION

async def handle_csv_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π CSV —Ñ–∞–π–ª - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø"""
    if update.message.text and update.message.text.strip() == "üîô –ù–∞–∑–∞–¥":
        return await back_to_menu(update, context)
    
    if not update.message.document:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å CSV —Ñ–∞–π–ª –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üîô –ù–∞–∑–∞–¥'",
            reply_markup=UPLOAD_MARKUP
        )
        return UPLOAD_CSV
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª —É —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        file = await context.bot.get_file(update.message.document.file_id)
        temp_file_path = f"{tempfile.gettempdir()}/{update.message.document.file_id}.csv"
        await file.download_to_drive(temp_file_path)
        
        # –ù–∞–º–∞–≥–∞—î–º–æ—Å—å –∑–∞–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ
        if CSVManager.replace_data(temp_file_path):
            await update.message.reply_text("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=OWNER_MENU)
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.",
                reply_markup=OWNER_MENU
            )
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_file_path)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É: {e}")
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ CSV —Ñ–∞–π–ª—É: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=OWNER_MENU
        )
    
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø"""
    logger.error("Exception while handling an update:", exc_info=context.error)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if update and isinstance(update, Update):
        if update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif update.message:
            chat_id = update.message.chat_id
        else:
            return
            
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞"""
    if not (token := os.getenv("BOT_TOKEN")):
        logger.error("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É BOT_TOKEN!")
        return
    
    CSVManager.ensure_file_exists()
    
    app = ApplicationBuilder().token(token).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    app.add_error_handler(error_handler)
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –±–µ—Å—ñ–¥–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å$"), add_record),
            CallbackQueryHandler(back_to_menu, pattern="^back$")
        ],
        states={
            MODEL: [
                CallbackQueryHandler(model_selected, pattern="^model:"),
                CallbackQueryHandler(executor_selected, pattern="^executor:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, model_manual),
            ],
            VIN: [
                CallbackQueryHandler(vin_selected, pattern="^vin:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, vin_manual),
            ],
            WORK: [
                CallbackQueryHandler(work_selected, pattern="^work:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, work_manual),
            ],
            DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_description),
            ],
            UPLOAD_CSV: [
                MessageHandler(filters.TEXT | filters.Document.CSV, handle_csv_upload),
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == '__main__':
    main()