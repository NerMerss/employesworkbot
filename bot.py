import os
import csv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)
import datetime

MODEL, VIN, WORK = range(3)
CSV_FILE = "records.csv"
ADMIN_USERNAMES = os.getenv("ADMIN_USERNAMES", "").split(",")  # —Å–ø–∏—Å–æ–∫ Telegram username –∞–¥–º–∏–Ω–æ–≤

# ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

ADMIN_MENU_MARKUP = ReplyKeyboardMarkup(
    [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"],
        ["üóë –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏", "üì§ –≠–∫—Å–ø–æ—Ä—Ç"],
        ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ],
    resize_keyboard=True
)

CLEAR_MENU_MARKUP = ReplyKeyboardMarkup(
    [
        ["‚ùå –û—á–∏—Å—Ç–∏—Ç—å –í–°–Å"],
        ["üî¢ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ ID"],
        ["üîô –ù–∞–∑–∞–¥"]
    ],
    resize_keyboard=True
)

CONFIRM_MARKUP = ReplyKeyboardMarkup(
    [
        ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"],
        ["üîô –ù–∞–∑–∞–¥"]
    ],
    resize_keyboard=True
)

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show admin menu"""
    if not is_admin(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await update.message.reply_text(
        "–ê–¥–º–∏–Ω-–º–µ–Ω—é:",
        reply_markup=ADMIN_MENU_MARKUP
    )

async def admin_add_record(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start adding record from admin menu"""
    if not is_admin(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    models = CSVManager.get_recent_values("model")
    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:",
        reply_markup=create_keyboard(models, "model")
    )
    return MODEL

async def admin_clear_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show clear options menu"""
    if not is_admin(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—á–∏—Å—Ç–∫–∏:",
        reply_markup=CLEAR_MENU_MARKUP
    )

async def ask_clear_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Ask confirmation for full clear"""
    if not is_admin(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await update.message.reply_text(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏?",
        reply_markup=CONFIRM_MARKUP
    )
    context.user_data["clear_type"] = "full"

async def ask_ids_to_clear(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Ask for IDs to clear"""
    if not is_admin(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 1 (—É–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å)\n"
        "‚Ä¢ 1-5 (—É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω)\n"
        "‚Ä¢ 1,3,5 (—É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n"
        "‚Ä¢ 1-3,5,7-9 (–∫–æ–º–±–∏–Ω–∞—Ü–∏—è)",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data["clear_type"] = "partial"

def parse_complex_ids(id_str: str) -> Set[str]:
    """Parse complex ID patterns like '1-3,5,7-9'"""
    ids = set()
    parts = id_str.split(",")
    
    for part in parts:
        part = part.strip()
        if "-" in part:
            start, end = map(int, part.split("-"))
            ids.update(str(i) for i in range(start, end + 1))
        elif part.isdigit():
            ids.add(part)
    
    return ids

async def execute_clearing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Execute clearing based on user choice"""
    if not is_admin(update):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    clear_type = context.user_data.get("clear_type")
    
    if clear_type == "full":
        if update.message.text == "‚úÖ –î–∞":
            success = CSVManager.clear_records()
            msg = "üóë –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!" if success else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"
        else:
            msg = "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    elif clear_type == "partial":
        try:
            ids_to_remove = parse_complex_ids(update.message.text)
            success = CSVManager.clear_records(ids_to_remove)
            msg = f"üóë –£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {', '.join(sorted(ids_to_remove))}" if success else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"
        except ValueError:
            msg = "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            await update.message.reply_text(msg)
            return
    
    await update.message.reply_text(
        msg,
        reply_markup=ADMIN_MENU_MARKUP
    )
    context.user_data.pop("clear_type", None)

async def handle_admin_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle admin menu commands"""
    text = update.message.text
    
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å":
        await admin_add_record(update, context)
    elif text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏":
        await admin_clear_options(update, context)
    elif text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç":
        await export_csv(update, context)
    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=ReplyKeyboardRemove()
        )
    elif text == "‚ùå –û—á–∏—Å—Ç–∏—Ç—å –í–°–Å":
        await ask_clear_confirmation(update, context)
    elif text == "üî¢ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ ID":
        await ask_ids_to_clear(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await show_admin_menu(update, context)
    elif text in ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]:
        await execute_clearing(update, context)
    elif "clear_type" in context.user_data:
        await execute_clearing(update, context)

def main() -> None:
    """Start the bot"""
    if not (token := os.getenv("BOT_TOKEN")):
        logger.error("BOT_TOKEN environment variable not set!")
        return
    
    CSVManager.ensure_file_exists()
    
    app = ApplicationBuilder().token(token).build()
    
    # Conversation handler remains the same
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å$"), admin_add_record)
        ],
        states={
            # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        },
        fallbacks=[CommandHandler("cancel", 
            lambda u, c: u.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.") or ConversationHandler.END)],
        allow_reentry=True
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("admin", show_admin_menu))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_commands))
    app.add_handler(CallbackQueryHandler(restart_conversation, pattern="^restart$"))
    
    logger.info("Starting bot...")
    app.run_polling()

if __name__ == '__main__':
    main()