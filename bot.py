import os
import csv
import logging
from typing import Dict, List, Optional, Set
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)
import datetime

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
MODEL, VIN, WORK, EXECUTOR = range(4)
CSV_FILE = "records.csv"
RECENT_ITEMS_LIMIT = 5

# –°–ø–∏—Å–∫–∏ –º–æ–¥–µ–ª–µ–π
TESLA_MODELS = ["Model 3", "Model Y", "Model S", "Model X", "Cybertruck", "Roadster", "–Ü–Ω—à–µ (–Ω–µ Tesla)"]
OTHER_MODELS = ["Rivian R1T", "Rivian R1S", "Lucid Air", "Zeekr 001", "Zeekr 007", "–Ü–Ω—à–µ"]

# –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
SPECIAL_COMMANDS = [
    "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å", "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å–∏", "üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö",
    "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –í–°–ï", "üî¢ –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞ ID", "üîô –ù–∞–∑–∞–¥",
    "‚úÖ –¢–∞–∫", "‚ùå –ù—ñ"
]

def parse_user_list(env_var: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ { '@username': '–Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ' }"""
    users = {}
    for item in os.getenv(env_var, "").split(","):
        if not item.strip():
            continue
        parts = item.strip().split(" ", 1)
        if len(parts) >= 2:
            username = parts[0] if parts[0].startswith("@") else f"@{parts[0]}"
            name = parts[1]
            users[username] = name
    return users

# –†—ñ–≤–Ω—ñ –¥–æ—Å—Ç—É–ø—É
OWNERS = parse_user_list("OWNERS")
MANAGERS = parse_user_list("MANAGERS")
WORKERS = parse_user_list("WORKERS")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
OWNER_MENU = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"], ["üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å–∏", "üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö"]],
    resize_keyboard=True
)

MANAGER_MENU = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"]],
    resize_keyboard=True
)

WORKER_MENU = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"]],
    resize_keyboard=True
)

DELETE_MENU = ReplyKeyboardMarkup(
    [["‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –í–°–ï"], ["üî¢ –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞ ID"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

CONFIRM_MARKUP = ReplyKeyboardMarkup(
    [["‚úÖ –¢–∞–∫", "‚ùå –ù—ñ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

class CSVManager:
    HEADERS = ["id", "timestamp", "user", "user_name", "executor", "executor_name", "model", "vin", "work", "user_level"]
    
    @staticmethod
    def ensure_file_exists():
        if not os.path.exists(CSV_FILE):
            with open(CSV_FILE, mode='w', newline='', encoding='utf-8') as f:
                csv.writer(f).writerow(CSVManager.HEADERS)
    
    @staticmethod
    def get_recent_values(field: str, limit: int = RECENT_ITEMS_LIMIT) -> List[str]:
        values = []
        seen = set()
        try:
            with open(CSV_FILE, newline='', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reversed(list(reader)):
                    if len(values) >= limit:
                        break
                    val = row.get(field, "").strip()
                    if val and val not in seen:
                        seen.add(val)
                        values.append(val)
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª CSV –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return values
    
    @staticmethod
    def save_record(user_data: Dict[str, str], username: str, user_name: str, user_level: str) -> int:
        CSVManager.ensure_file_exists()
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        with open(CSV_FILE, 'r+', newline='', encoding='utf-8') as f:
            rows = list(csv.reader(f))
            next_id = int(rows[-1][0]) + 1 if len(rows) > 1 else 1
            writer = csv.writer(f)
            writer.writerow([
                next_id,
                timestamp,
                username,
                user_name,
                user_data["executor"],
                user_data["executor_name"],
                user_data["model"],
                user_data["vin"],
                user_data["work"],
                user_level
            ])
        return next_id
    
    @staticmethod
    def delete_records(ids_to_remove: Optional[Set[str]] = None) -> bool:
        try:
            with open(CSV_FILE, 'r', newline='', encoding='utf-8') as f:
                rows = list(csv.reader(f))
            
            if not rows:
                return False
            
            header, data = rows[0], rows[1:]
            new_data = [row for row in data if not ids_to_remove or row[0] not in ids_to_remove]
            
            with open(CSV_FILE, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(header)
                writer.writerows(new_data)
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")
            return False

def get_user_level(username: str) -> Optional[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    username = username.lower().strip()
    if not username.startswith("@"):
        username = f"@{username}"
        
    if username in {k.lower(): v for k, v in OWNERS.items()}:
        return "owner"
    elif username in {k.lower(): v for k, v in MANAGERS.items()}:
        return "manager"
    elif username in {k.lower(): v for k, v in WORKERS.items()}:
        return "worker"
    return None

def create_keyboard(items: List[str], prefix: str) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(item, callback_data=f"{prefix}:{item}")] for item in items]
    buttons.append([InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data=f"{prefix}:manual")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(buttons)

def create_model_keyboard(models: List[str]) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(model, callback_data=f"model:{model}")] for model in models]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(buttons)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    if query:
        await query.answer()
        try:
            await query.delete_message()
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    username = f"@{update.effective_user.username}"
    user_level = get_user_level(username)
    
    if user_level == "owner":
        await update.effective_message.reply_text("–ú–µ–Ω—é –≤–ª–∞—Å–Ω–∏–∫–∞:", reply_markup=OWNER_MENU)
    elif user_level == "manager":
        await update.effective_message.reply_text("–ú–µ–Ω—é –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞:", reply_markup=MANAGER_MENU)
    else:
        await update.effective_message.reply_text("–ú–µ–Ω—é –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=WORKER_MENU)
    
    context.user_data.clear()
    return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ—á–∞—Ç–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º"""
    username = f"@{update.effective_user.username}"
    user_level = get_user_level(username)
    
    if not user_level:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞")
        return
    
    if user_level == "owner":
        await update.message.reply_text("–ú–µ–Ω—é –≤–ª–∞—Å–Ω–∏–∫–∞:", reply_markup=OWNER_MENU)
    elif user_level == "manager":
        await update.message.reply_text("–ú–µ–Ω—é –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞:", reply_markup=MANAGER_MENU)
    else:
        await update.message.reply_text("–ú–µ–Ω—é –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=WORKER_MENU)

async def add_record(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É"""
    username = f"@{update.effective_user.username}"
    user_level = get_user_level(username)
    user_name = OWNERS.get(username) or MANAGERS.get(username) or WORKERS.get(username) or update.effective_user.full_name
    
    if not user_level:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END
    
    context.user_data["user_level"] = user_level
    context.user_data["user_name"] = user_name
    
    if user_level == "worker":
        context.user_data["executor"] = username
        context.user_data["executor_name"] = user_name
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:",
            reply_markup=create_model_keyboard(TESLA_MODELS)
        )
        return MODEL
    
    if user_level == "owner":
        executors = {**OWNERS, **MANAGERS, **WORKERS}
    else:  # manager
        executors = {username: user_name}
        executors.update(WORKERS)
    
    buttons = []
    for user_id, name in executors.items():
        buttons.append([InlineKeyboardButton(
            name,
            callback_data=f"executor:{user_id}:{name}"
        )])
    
    if user_level == "manager":
        buttons.insert(0, [InlineKeyboardButton(
            f"–Ø ({user_name})",
            callback_data=f"executor:{username}:{user_name}"
        )])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return EXECUTOR

async def executor_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≤–∏–∫–æ–Ω–∞–≤—Ü—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        return await back_to_menu(update, context)
    
    _, user_id, name = query.data.split(":", 2)
    context.user_data["executor"] = user_id
    context.user_data["executor_name"] = name
    
    await query.edit_message_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:",
        reply_markup=create_model_keyboard(TESLA_MODELS)
    )
    return MODEL

async def model_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        return await back_to_menu(update, context)
    
    selected = query.data.split(":")[1]
    context.user_data["model"] = selected
    
    if selected == "–Ü–Ω—à–µ (–Ω–µ Tesla)":
        await query.edit_message_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:",
            reply_markup=create_model_keyboard(OTHER_MODELS)
        )
        return MODEL
    
    vins = CSVManager.get_recent_values("vin")
    await query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å VIN –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:",
        reply_markup=create_keyboard(vins, "vin")
    )
    return VIN

async def model_manual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î —Ä—É—á–Ω–∏–π –≤–≤—ñ–¥ –º–æ–¥–µ–ª—ñ"""
    text = update.message.text.strip()
    
    if text in SPECIAL_COMMANDS:
        return await handle_text_messages(update, context)
    
    if text in TESLA_MODELS + OTHER_MODELS:
        context.user_data["model"] = text
    else:
        context.user_data["model"] = f"–Ü–Ω—à–µ: {text}"
    
    vins = CSVManager.get_recent_values("vin")
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å VIN –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:",
        reply_markup=create_keyboard(vins, "vin")
    )
    return VIN

async def vin_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä VIN"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        return await back_to_menu(update, context)
    
    selected = query.data.split(":")[1]
    if selected == "manual":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ 6 —Å–∏–º–≤–æ–ª—ñ–≤ VIN:")
        return VIN
    
    context.user_data["vin"] = selected
    await query.edit_message_text(f"VIN: {selected}")
    return await show_work_options(update, context)

async def vin_manual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î —Ä—É—á–Ω–∏–π –≤–≤—ñ–¥ VIN"""
    text = update.message.text.strip()
    
    if text in SPECIAL_COMMANDS:
        return await handle_text_messages(update, context)
    
    if len(text) != 6 or not text.isalnum():
        await update.message.reply_text("‚ùó –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–Ω–æ 6 —Å–∏–º–≤–æ–ª—ñ–≤ VIN.")
        return VIN
    
    context.user_data["vin"] = text.upper()
    return await show_work_options(update, context)

async def show_work_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä–æ–±—ñ—Ç"""
    works = CSVManager.get_recent_values("work", 6)
    keyboard = create_keyboard(works, "work")
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "–©–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ?",
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            "–©–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ?",
            reply_markup=keyboard
        )
    return WORK

async def work_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ä–æ–±—ñ—Ç"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        return await back_to_menu(update, context)
    
    work_text = query.data.split(":")[1]
    if work_text == "manual":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å, —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ:")
        return WORK
    
    await save_and_confirm(update, context, work_text)
    return ConversationHandler.END

async def work_manual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î —Ä—É—á–Ω–∏–π –≤–≤—ñ–¥ —Ä–æ–±—ñ—Ç"""
    text = update.message.text.strip()
    
    if text in SPECIAL_COMMANDS:
        return await handle_text_messages(update, context)
    
    await save_and_confirm(update, context, text)
    return ConversationHandler.END

async def save_and_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, work_text: str) -> None:
    """–ó–±–µ—Ä—ñ–≥–∞—î –∑–∞–ø–∏—Å —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î"""
    username = f"@{update.effective_user.username}"
    user_name = context.user_data["user_name"]
    user_level = context.user_data["user_level"]
    
    context.user_data["work"] = work_text
    record_id = CSVManager.save_record(context.user_data, username, user_name, user_level)
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å #{record_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ\n"
            f"–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {context.user_data['executor_name']}\n"
            f"–ú–æ–¥–µ–ª—å: {context.user_data['model']}\n"
            f"VIN: {context.user_data['vin']}\n"
            f"–†–æ–±–æ—Ç–∞: {work_text}",
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å #{record_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ\n"
            f"–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {context.user_data['executor_name']}\n"
            f"–ú–æ–¥–µ–ª—å: {context.user_data['model']}\n"
            f"VIN: {context.user_data['vin']}\n"
            f"–†–æ–±–æ—Ç–∞: {work_text}",
            reply_markup=keyboard
        )

async def show_delete_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    username = f"@{update.effective_user.username}"
    if get_user_level(username) != "owner":
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó")
        return
    
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
        reply_markup=DELETE_MENU
    )

async def ask_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø–∏—Ç—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤"""
    username = f"@{update.effective_user.username}"
    if get_user_level(username) != "owner":
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó")
        return
    
    await update.message.reply_text(
        "‚ùó –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü –∑–∞–ø–∏—Å–∏?",
        reply_markup=CONFIRM_MARKUP
    )
    context.user_data["delete_type"] = "all"

async def ask_ids_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø–∏—Ç—É—î ID –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    username = f"@{update.effective_user.username}"
    if get_user_level(username) != "owner":
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó")
        return
    
    # –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö ID
    try:
        with open(CSV_FILE, newline='', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            records = list(reader)
            
        if not records:
            await update.message.reply_text("‚Ñπ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è", reply_markup=OWNER_MENU)
            return
            
        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
        last_records = records[-10:]
        message = "–î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ 10):\n"
        message += "\n".join(
            f"ID: {record['id']}, –ú–æ–¥–µ–ª—å: {record['model']}, VIN: {record['vin']}"
            for record in last_records
        )
        message += "\n\n–í–≤–µ–¥—ñ—Ç—å ID –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1, 2-5, 7):"
        
        await update.message.reply_text(
            message,
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        context.user_data["delete_type"] = "selected"
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤",
            reply_markup=OWNER_MENU
        )

async def execute_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–∫–æ–Ω—É—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤"""
    username = f"@{update.effective_user.username}"
    if get_user_level(username) != "owner":
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó")
        return
    
    text = update.message.text.strip()
    
    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ú–µ–Ω—é –≤–ª–∞—Å–Ω–∏–∫–∞:", reply_markup=OWNER_MENU)
        context.user_data.pop("delete_type", None)
        return
    
    delete_type = context.user_data.get("delete_type")
    
    if delete_type == "all":
        if text == "‚úÖ –¢–∞–∫":
            try:
                with open(CSV_FILE, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    writer.writerow(CSVManager.HEADERS)
                await update.message.reply_text("üóë –í—Å—ñ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–∞–ª–µ–Ω–æ!", reply_markup=OWNER_MENU)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤: {e}")
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ", reply_markup=OWNER_MENU)
        else:
            await update.message.reply_text("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=OWNER_MENU)
    
    elif delete_type == "selected":
        if not text:
            await update.message.reply_text("‚ùó –í–≤–µ–¥—ñ—Ç—å ID –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è", reply_markup=OWNER_MENU)
            return
            
        try:
            ids_to_remove = parse_ids(text)
            if not ids_to_remove:
                await update.message.reply_text("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID", reply_markup=OWNER_MENU)
                return
            
            # –ß–∏—Ç–∞—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
            with open(CSV_FILE, 'r', newline='', encoding='utf-8') as f:
                reader = csv.reader(f)
                rows = list(reader)
            
            if len(rows) <= 1:  # –¢—ñ–ª—å–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                await update.message.reply_text("‚Ñπ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è", reply_markup=OWNER_MENU)
                return
            
            header = rows[0]
            data = rows[1:]
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ—Å–Ω—É—é—á—ñ ID
            existing_ids = {row[0] for row in data}
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ ID, —è–∫—ñ —ñ—Å–Ω—É—é—Ç—å
            ids_to_remove = [id_ for id_ in ids_to_remove if id_ in existing_ids]
            
            if not ids_to_remove:
                await update.message.reply_text(
                    "‚Ñπ –í–∫–∞–∑–∞–Ω—ñ ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ",
                    reply_markup=OWNER_MENU
                )
                return
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–ø–∏—Å–∏
            new_data = [row for row in data if row[0] not in ids_to_remove]
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –Ω–∞–∑–∞–¥
            with open(CSV_FILE, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(header)
                writer.writerows(new_data)
            
            await update.message.reply_text(
                f"üóë –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {len(ids_to_remove)}\n"
                f"ID: {', '.join(sorted(ids_to_remove))}",
                reply_markup=OWNER_MENU
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=OWNER_MENU
            )
    
    context.user_data.pop("delete_type", None)

def parse_ids(id_str: str) -> List[str]:
    """–†–æ–∑–±–∏—Ä–∞—î —Ä—è–¥–æ–∫ –∑ ID –Ω–∞ —Å–ø–∏—Å–æ–∫"""
    ids = []
    parts = [p.strip() for p in id_str.split(",") if p.strip()]
    
    for part in parts:
        if "-" in part:
            try:
                start, end = map(int, part.split("-"))
                ids.extend(str(i) for i in range(start, end + 1))
            except ValueError:
                continue
        else:
            if part.isdigit():
                ids.append(part)
    return ids

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï–∫—Å–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ —É CSV"""
    username = f"@{update.effective_user.username}"
    if get_user_level(username) != "owner":
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó")
        return
    
    if not os.path.exists(CSV_FILE):
        await update.message.reply_text("‚ùå –§–∞–π–ª –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    await update.message.reply_document(
        document=open(CSV_FILE, 'rb'),
        filename='service_records.csv'
    )

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    username = f"@{update.effective_user.username}"
    user_level = get_user_level(username)
    
    if not user_level:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞")
        return
    
    text = update.message.text.strip()
    
    if text in SPECIAL_COMMANDS:
        if text == "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å":
            await add_record(update, context)
        elif text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å–∏" and user_level == "owner":
            await show_delete_menu(update, context)
        elif text == "üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö" and user_level == "owner":
            await export_data(update, context)
        elif text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –í–°–ï" and user_level == "owner":
            await ask_delete_confirmation(update, context)
        elif text == "üî¢ –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞ ID" and user_level == "owner":
            await ask_ids_to_delete(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥":
            await back_to_menu(update, context)
        elif text in ["‚úÖ –¢–∞–∫", "‚ùå –ù—ñ"] and user_level == "owner" and "delete_type" in context.user_data:
            await execute_deletion(update, context)
        return
    
    current_state = await context.application.persistence.get_conversation(update.effective_chat.id)
    if current_state:
        if current_state.get('state') == MODEL:
            await model_manual(update, context)
        elif current_state.get('state') == VIN:
            await vin_manual(update, context)
        elif current_state.get('state') == WORK:
            await work_manual(update, context)
    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –ø–æ—Ç–æ—á–Ω—É –±–µ—Å—ñ–¥—É"""
    return await back_to_menu(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞"""
    if not (token := os.getenv("BOT_TOKEN")):
        logger.error("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É BOT_TOKEN!")
        return
    
    CSVManager.ensure_file_exists()
    
    app = ApplicationBuilder().token(token).build()
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –±–µ—Å—ñ–¥–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å$"), add_record),
            CallbackQueryHandler(back_to_menu, pattern="^back$")
        ],
        states={
            EXECUTOR: [
                CallbackQueryHandler(executor_selected, pattern="^executor:"),
            ],
            MODEL: [
                CallbackQueryHandler(model_selected, pattern="^model:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, model_manual),
            ],
            VIN: [
                CallbackQueryHandler(vin_selected, pattern="^vin:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, vin_manual),
            ],
            WORK: [
                CallbackQueryHandler(work_selected, pattern="^work:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, work_manual),
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == '__main__':
    main()