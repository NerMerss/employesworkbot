import os
import csv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)
import datetime

MODEL, VIN, WORK = range(3)
CSV_FILE = "records.csv"
ADMIN_USERNAMES = os.getenv("ADMIN_USERNAMES", "").split(",")  # —Å–ø–∏—Å–æ–∫ Telegram username –∞–¥–º–∏–Ω–æ–≤

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ CSV —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, mode='w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["id", "timestamp", "user", "model", "vin", "work"])

def get_recent_values(field, limit=5):
    values = []
    seen = set()
    if not os.path.exists(CSV_FILE):
        return []
    with open(CSV_FILE, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        rows = list(reader)[::-1]  # –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ
        for row in rows:
            val = row.get(field)
            if val and val not in seen:
                seen.add(val)
                values.append(val)
                if len(values) >= limit:
                    break
    return values

async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    username = update.effective_user.username
    is_admin = f"@{username}" in ADMIN_USERNAMES

    reply_keyboard = [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"]]
    if is_admin:
        reply_keyboard.append(["üìÅ –ï–∫—Å–ø–æ—Ä—Ç", "üóë –û—á–∏—Å—Ç–∏—Ç–∏"])

    if update.message:
        await update.message.reply_text(
            "üìã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        )
    else:
        await update.callback_query.message.reply_text(
            "üìã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        )

    # —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    return await start(update, context)
    username = update.effective_user.username
    is_admin = f"@{username}" in ADMIN_USERNAMES

    reply_keyboard = [["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å"]]
    if is_admin:
        reply_keyboard.append(["üìÅ –ï–∫—Å–ø–æ—Ä—Ç", "üóë –û—á–∏—Å—Ç–∏—Ç–∏"])

    await update.message.reply_text(
        "üìã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )
    username = update.effective_user.username
    is_admin = f"@{username}" in ADMIN_USERNAMES

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data="restart")],
    ]
    if is_admin:
        keyboard.append([InlineKeyboardButton("üìÅ –ï–∫—Å–ø–æ—Ä—Ç", callback_data="menu_export")])
        keyboard.append([InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="menu_clear")])

    await update.message.reply_text("üìã –ú–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))



    models = get_recent_values("model")
    keyboard = [[InlineKeyboardButton(model, callback_data=f"model:{model}")] for model in models]
    keyboard.append([InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="model:manual")])

    if update.message:
        await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return MODEL

async def model_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected = query.data.split("model:")[1]
    if selected == "manual":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:")
        return MODEL
    context.user_data["model"] = selected

    vins = get_recent_values("vin", 5)
    keyboard = [[InlineKeyboardButton(vin, callback_data=f"vin:{vin}")] for vin in vins]
    keyboard.append([InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="vin:manual")])
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å VIN –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return VIN

async def model_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["model"] = update.message.text.strip()
    return await ask_vin(update, context)

async def ask_vin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vins = get_recent_values("vin", 5)
    keyboard = [[InlineKeyboardButton(vin, callback_data=f"vin:{vin}")] for vin in vins]
    keyboard.append([InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="vin:manual")])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å VIN –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return VIN

async def vin_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected = query.data.split("vin:")[1]
    if selected == "manual":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ 6 —Å–∏–º–≤–æ–ª—ñ–≤ VIN:")
        return VIN
    context.user_data["vin"] = selected
    await query.edit_message_text(f"VIN: {selected}")
    return await show_work_options(update, context)

async def vin_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vin_input = update.message.text.strip()
    if len(vin_input) != 6 or not vin_input.isalnum():
        await update.message.reply_text("‚ùó –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–Ω–æ 6 —Å–∏–º–≤–æ–ª—ñ–≤ VIN.")
        return VIN
    context.user_data["vin"] = vin_input.upper()
    return await show_work_options(update, context)

async def show_work_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    works = get_recent_values("work", 6)
    keyboard = [[InlineKeyboardButton(work, callback_data=f"work:{work}")] for work in works]
    keyboard.append([InlineKeyboardButton("–Ü–Ω—à–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É)", callback_data="work:manual")])
    if update.message:
        await update.message.reply_text("–©–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ?", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.reply_text("–©–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return WORK

async def work_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected = query.data.split("work:")[1]
    if selected == "manual":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å, —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ:")
        return WORK
    await save_record(query.from_user.full_name, context, selected)
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", callback_data="restart")]]
    await query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {selected}", reply_markup=InlineKeyboardMarkup(keyboard))
    await send_main_menu(update, context)
    return ConversationHandler.END

async def work_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    work_text = update.message.text.strip()
    await save_record(update.message.from_user.full_name, context, work_text)
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", callback_data="restart")]]
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ. –î—è–∫—É—î–º–æ!", reply_markup=InlineKeyboardMarkup(keyboard))
    return ConversationHandler.END

async def save_record(user, context, work_text):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(CSV_FILE, newline='', encoding='utf-8') as f:
        existing_rows = list(csv.reader(f))
    next_id = len(existing_rows) if existing_rows else 1
    row = [str(next_id), timestamp, user, context.user_data["model"], context.user_data["vin"], work_text]
    with open(CSV_FILE, mode='a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(row)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        return await start(update, context)
    elif update.message:
        return await start(update, context)
        await update.callback_query.answer()
    return await start(update, context)

async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    if f"@{username}" not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –µ–∫—Å–ø–æ—Ä—Ç—É.")
        return
    if not os.path.exists(CSV_FILE):
        await update.message.reply_text("‚ùå CSV —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    await update.message.reply_document(document=open(CSV_FILE, "rb"), filename="records.csv")

async def clear_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    if f"@{username}" not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏.")
        return

    args = update.message.text.strip().split()
    if len(args) > 1:
        try:
            arg = args[1]
            if "-" in arg:
                start_id, end_id = map(int, arg.split("-"))
                ids_to_remove = set(str(i) for i in range(start_id, end_id + 1))
            else:
                ids_to_remove = {str(int(arg))}
        except ValueError:
            await update.message.reply_text("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /clear –∞–±–æ /clear 12 –∞–±–æ /clear 5-8")
            return

        with open(CSV_FILE, newline='', encoding='utf-8') as f:
            rows = list(csv.reader(f))
        header, data = rows[0], rows[1:]
        new_data = [row for row in data if row[0] not in ids_to_remove]
        keyboard = [[InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ –∑–∞–ø–∏—Å–∏", callback_data=f"confirm_partial_clear:{','.join(sorted(ids_to_remove))}")]]
        await update.message.reply_text(
            f"üî∏ –í–∏ –≤–∏–±—Ä–∞–ª–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å–∏: {', '.join(sorted(ids_to_remove))}. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
        return

    keyboard = [[InlineKeyboardButton("–¢–∞–∫, –æ—á–∏—Å—Ç–∏—Ç–∏ –í–°–ï", callback_data="confirm_clear")]]
    await update.message.reply_text(
        "‚ùó –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü –∑–∞–ø–∏—Å–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await update.message.reply_text(
        "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–µ–≤–Ω–∏–π –∑–∞–ø–∏—Å –∞–±–æ –ø—Ä–æ–º—ñ–∂–æ–∫ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ \"1\" –∞–±–æ \"1-20\" –Ω–∏–∂—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º."
    )


async def confirm_clear_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    if f"@{username}" not in ADMIN_USERNAMES:
        await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        return
    await update.callback_query.answer()
    with open(CSV_FILE, mode='w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["timestamp", "user", "model", "vin", "work"])
    await update.callback_query.edit_message_text("üóë –£—Å—ñ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.callback_query.message.message_id, delay=5)


async def confirm_partial_clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    if f"@{username}" not in ADMIN_USERNAMES:
        await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        return
    await update.callback_query.answer()
    ids_to_remove = update.callback_query.data.split(":")[1].split(",")
    with open(CSV_FILE, newline='', encoding='utf-8') as f:
        rows = list(csv.reader(f))
    header, data = rows[0], rows[1:]
    new_data = [row for row in data if row[0] not in ids_to_remove]
    with open(CSV_FILE, mode='w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(header)
        writer.writerows(new_data)
    await update.callback_query.edit_message_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–∏: {', '.join(ids_to_remove)}")


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    username = update.effective_user.username
    is_admin = f"@{username}" in ADMIN_USERNAMES

    if query.data == "menu_export" and is_admin:
        if not os.path.exists(CSV_FILE):
            await query.edit_message_text("‚ùå CSV —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await context.bot.send_document(chat_id=update.effective_chat.id, document=open(CSV_FILE, "rb"), filename="records.csv")

    elif query.data == "menu_clear" and is_admin:
        keyboard = [[InlineKeyboardButton("–¢–∞–∫, –æ—á–∏—Å—Ç–∏—Ç–∏ –í–°–ï", callback_data="confirm_clear")]]
        await query.edit_message_text("‚ùó –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü –∑–∞–ø–∏—Å–∏?", reply_markup=InlineKeyboardMarkup(keyboard))


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

if __name__ == '__main__':
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", send_main_menu),
            CallbackQueryHandler(model_selected, pattern="^model:")
        ],
        states={
            MODEL: [
                CallbackQueryHandler(model_selected, pattern="^model:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, model_manual),
            ],
            VIN: [
                CallbackQueryHandler(vin_selected, pattern="^vin:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, vin_manual),
            ],
            WORK: [
                CallbackQueryHandler(work_selected, pattern="^work:"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, work_manual),
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(restart, pattern="^restart$"))
    app.add_handler(CommandHandler("menu", send_main_menu))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å$"), restart))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìÅ –ï–∫—Å–ø–æ—Ä—Ç$"), export_csv))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üóë –û—á–∏—Å—Ç–∏—Ç–∏$"), clear_csv))
    app.add_handler(CallbackQueryHandler(handle_menu_buttons, pattern="^menu_"))
    app.add_handler(CommandHandler("export", export_csv))
    app.add_handler(CommandHandler("clear", clear_csv))
    app.add_handler(CallbackQueryHandler(confirm_clear_csv, pattern="^confirm_clear$"))
    app.add_handler(CallbackQueryHandler(confirm_partial_clear, pattern="^confirm_partial_clear:"))
    app.run_polling()
